name: Frontend CI/CD

on:
  push:
    branches:
      - dev
      - main

jobs:
  test-and-build:
    runs-on: aiadgen
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Create Environment-Specific .env File
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "NEXT_PUBLIC_API_URL=${{ vars.PROD_API_URL }}" >> .env
            echo "NEXT_PUBLIC_ENVIRONMENT=production" >> .env
          elif [ "${{ github.ref }}" == "refs/heads/dev" ]; then
            echo "NEXT_PUBLIC_API_URL=${{ vars.DEV_API_URL }}" >> .env
            echo "NEXT_PUBLIC_ENVIRONMENT=test" >> .env
          fi

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Tests
        run: |
          pnpm test || (echo "TEST_FAILED=true" >> $GITHUB_ENV && echo "::warning::Tests failed, but continuing...")

      - name: Build Frontend
        run: pnpm build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: |
            .next/
            public/
            package.json
            pnpm-lock.yaml
            .env
          if-no-files-found: error
          include-hidden-files: true
          compression-level: 6

  deploy:
    runs-on: aiadgen
    needs: [test-and-build]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: next-build
          path: .

      - name: Determine Deployment Environment
        id: set-env
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "DEPLOY_PORT=5000" >> $GITHUB_ENV
            echo "DEPLOY_NAME=ai-adgen-frontend-prod" >> $GITHUB_ENV
            echo "BACKUP_DIR=frontend-prod-backups" >> $GITHUB_ENV
            echo "ENVIRONMENT=Production" >> $GITHUB_ENV
            echo "DOMAIN=genz.ad" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/dev" ]; then
            echo "DEPLOY_PORT=5005" >> $GITHUB_ENV
            echo "DEPLOY_NAME=ai-adgen-frontend-dev" >> $GITHUB_ENV
            echo "BACKUP_DIR=frontend-dev-backups" >> $GITHUB_ENV
            echo "ENVIRONMENT=Development" >> $GITHUB_ENV
            echo "DOMAIN=staging.genz.ad" >> $GITHUB_ENV
          fi

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SERVER_PRIVATE_KEY }}

      - name: Create Backup and Deploy
        id: deploy
        run: |
          echo "Starting deployment process with rollback capability..."
          
          # Initialize BACKUP_EXISTS variable and BACKUP_PATH
          echo "BACKUP_EXISTS=false" >> $GITHUB_ENV
          
          # Create backup if this is a production deployment
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            BACKUP_EXISTS=$(ssh -o StrictHostKeyChecking=no "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}" \
              "if [ -d \"/home/${{ secrets.SERVER_USER }}/AI-Ad-Gen-Frontend/.next\" ]; then echo 'true'; else echo 'false'; fi")
            echo "BACKUP_EXISTS=$BACKUP_EXISTS" >> $GITHUB_ENV
            
            if [ "$BACKUP_EXISTS" == "true" ]; then
              # Create backup on server
              TIMESTAMP=$(date +%Y%m%d_%H%M%S)
              BACKUP_PATH="/home/${{ secrets.SERVER_USER }}/${{ env.BACKUP_DIR }}/backup_${TIMESTAMP}"
              echo "BACKUP_PATH=$BACKUP_PATH" >> $GITHUB_ENV
              
              ssh -o StrictHostKeyChecking=no "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}" << EOF
                set -e
                echo "Creating backup of production deployment..."
                mkdir -p /home/${{ secrets.SERVER_USER }}/${{ env.BACKUP_DIR }}
                TIMESTAMP=\$(date +%Y%m%d_%H%M%S)
                BACKUP_PATH="/home/${{ secrets.SERVER_USER }}/${{ env.BACKUP_DIR }}/backup_\${TIMESTAMP}"
                echo "Backing up to \$BACKUP_PATH"
                mkdir -p \${BACKUP_PATH}
                cp -r /home/${{ secrets.SERVER_USER }}/AI-Ad-Gen-Frontend/.next \${BACKUP_PATH}/
                cp -r /home/${{ secrets.SERVER_USER }}/AI-Ad-Gen-Frontend/public \${BACKUP_PATH}/
                cp /home/${{ secrets.SERVER_USER }}/AI-Ad-Gen-Frontend/package.json \${BACKUP_PATH}/
                cp /home/${{ secrets.SERVER_USER }}/AI-Ad-Gen-Frontend/pnpm-lock.yaml \${BACKUP_PATH}/
                if [ -f "/home/${{ secrets.SERVER_USER }}/AI-Ad-Gen-Frontend/.env" ]; then
                  cp /home/${{ secrets.SERVER_USER }}/AI-Ad-Gen-Frontend/.env \${BACKUP_PATH}/
                fi
                echo "Backup completed successfully."
EOF
            else
              echo "No existing deployment to backup."
            fi
          fi

          # Copy new build files to server
          echo "Copying build files to server..."
          scp -o StrictHostKeyChecking=no -r .next public/ package.json pnpm-lock.yaml .env \
          "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SERVER_USER }}/AI-Ad-Gen-Frontend"

          # Start the application and run health checks
          echo "Starting application with PM2..."
          DEPLOY_SUCCESS="true"
          ssh -o StrictHostKeyChecking=no "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}" << EOF || DEPLOY_SUCCESS="false"
            cd /home/${{ secrets.SERVER_USER }}/AI-Ad-Gen-Frontend
            pnpm install --frozen-lockfile
            pm2 delete ${{ env.DEPLOY_NAME }} || true
            PORT=${{ env.DEPLOY_PORT }} pm2 start pnpm --name ${{ env.DEPLOY_NAME }} -- start

            # Wait for app to initialize
            echo "Waiting for application to start..."
            sleep 15

            # Local health check with retries
            echo "Performing local health check..."
            MAX_RETRIES=5
            RETRY_COUNT=0
            HEALTH_CHECK_PASSED=false

            while [ \$RETRY_COUNT -lt \$MAX_RETRIES ] && [ "\$HEALTH_CHECK_PASSED" = "false" ]; do
              if curl -s -o /dev/null -w "%{http_code}" http://localhost:${{ env.DEPLOY_PORT }} | grep -q "200"; then
                echo "Local health check passed."
                HEALTH_CHECK_PASSED=true
              else
                RETRY_COUNT=\$((RETRY_COUNT+1))
                if [ \$RETRY_COUNT -lt \$MAX_RETRIES ]; then
                  echo "Health check attempt \$RETRY_COUNT failed. Retrying in 10 seconds..."
                  sleep 10
                else
                  echo "::error::Local health check failed after \$MAX_RETRIES attempts."
                  exit 1
                fi
              fi
            done

            # Domain health check with retries
            echo "Performing domain health check..."
            RETRY_COUNT=0
            HEALTH_CHECK_PASSED=false

            while [ \$RETRY_COUNT -lt \$MAX_RETRIES ] && [ "\$HEALTH_CHECK_PASSED" = "false" ]; do
              if curl -s -o /dev/null -w "%{http_code}" https://${{ env.DOMAIN }} | grep -q "200"; then
                echo "Domain health check passed."
                HEALTH_CHECK_PASSED=true
              else
                RETRY_COUNT=\$((RETRY_COUNT+1))
                if [ \$RETRY_COUNT -lt \$MAX_RETRIES ]; then
                  echo "Domain health check attempt \$RETRY_COUNT failed. Retrying in 10 seconds..."
                  sleep 10
                else
                  echo "::error::Domain health check failed after \$MAX_RETRIES attempts."
                  exit 1
                fi
              fi
            done
EOF
          
          # Set status for notifications
          if [ "$DEPLOY_SUCCESS" == "false" ]; then
            echo "DEPLOY_FAILED=true" >> $GITHUB_ENV
          else
            echo "DEPLOY_FAILED=false" >> $GITHUB_ENV
          fi

      - name: Rollback on Failure
        if: failure() && env.BACKUP_EXISTS == 'true'
        run: |
          echo "BACKUP_EXISTS is set to ${{ env.BACKUP_EXISTS }}"
          echo "Starting rollback process to previous deployment..."
          
          # Get the latest backup if BACKUP_PATH is not already set
          if [ -z "${{ env.BACKUP_PATH }}" ]; then
            BACKUP_PATH=$(ssh -o StrictHostKeyChecking=no "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}" "ls -td /home/${{ secrets.SERVER_USER }}/${{ env.BACKUP_DIR }}/backup_* | head -1")
            echo "Using latest backup at: $BACKUP_PATH"
          else
            echo "Using backup at: ${{ env.BACKUP_PATH }}"
            BACKUP_PATH="${{ env.BACKUP_PATH }}"
          fi
          
          # Perform rollback
          ssh -o StrictHostKeyChecking=no "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}" << EOF
            set -x  # Enable command echo for debugging
            if [ -d "$BACKUP_PATH" ]; then
              echo "Copying files from backup..."
              cp -rv $BACKUP_PATH/.next /home/${{ secrets.SERVER_USER }}/AI-Ad-Gen-Frontend/
              cp -rv $BACKUP_PATH/public /home/${{ secrets.SERVER_USER }}/AI-Ad-Gen-Frontend/
              cp -v $BACKUP_PATH/package.json /home/${{ secrets.SERVER_USER }}/AI-Ad-Gen-Frontend/
              cp -v $BACKUP_PATH/pnpm-lock.yaml /home/${{ secrets.SERVER_USER }}/AI-Ad-Gen-Frontend/
              if [ -f "$BACKUP_PATH/.env" ]; then
                cp -v $BACKUP_PATH/.env /home/${{ secrets.SERVER_USER }}/AI-Ad-Gen-Frontend/
              fi

              # Restart service
              cd /home/${{ secrets.SERVER_USER }}/AI-Ad-Gen-Frontend
              echo "Restarting service..."
              pm2 delete ${{ env.DEPLOY_NAME }} || true
              PORT=${{ env.DEPLOY_PORT }} pm2 start pnpm --name ${{ env.DEPLOY_NAME }} -- start
              echo "Rollback completed successfully."
            else
              echo "ERROR: Backup directory not found at $BACKUP_PATH"
              exit 1
            fi
EOF

      - name: Send Slack Notification
        if: always()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "channel": "devops-alert",
              "attachments": [
                {
                  "color": "${{ env.DEPLOY_FAILED == 'true' && '#D00000' || '#36a64f' }}",
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "${{ env.DEPLOY_FAILED == 'true' && 'Deployment Failed' || '✅ Deployment Successful' }}"
                      }
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Environment:*\n${{ env.ENVIRONMENT }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Domain:*\n${{ env.DOMAIN }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Branch:*\n${{ github.ref_name }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Triggered by:*\n${{ github.actor }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Test Status:*\n${{ env.TEST_FAILED == 'true' && '❗ Test Failed' || '✅ Test Passed' }}"
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "${{ env.TEST_FAILED == 'true' && '❗ Some tests failed, but deployment is continuing. Please check the logs.' || 'All tests passed successfully.' }}"
                      }
                    },
                    {
                      "type": "divider"
                    },
                    {
                      "type": "context",
                      "elements": [
                        {
                          "type": "mrkdwn",
                          "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Pipeline Details>"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK